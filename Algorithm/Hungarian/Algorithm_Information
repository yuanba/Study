1.Reference : 
	1.http://blog.csdn.net/pi9nc/article/details/11848327
	2.http://blog.csdn.net/xuguangsoft/article/details/7861988

2.My Expaination:
    算法的全称是：无权二分图最大匹配算法，又称匈牙利算法
    １．定义：
        １．二分图：（无奇圈的无向图）我们将图中定点分成两个子集，每个子集中的点不存在邻边,不同的子集中的点存在相邻的边
        ２．诸多定义：
            １．匹配边：我们当前选定的边称之为是匹配边
            ２．匹配点：当前选择的边的定点均是匹配点
            ３．非匹配边：当前未选择的边
            ４．非匹配点：当前未进行连接操作的顶点，不存在与任何一条已经匹配边的顶点集中
            ５．交替路：
                以一个非匹配点开始，始终保持着这样一条路径：非匹配边－匹配边－非匹配边，知道我们遇到第一个非匹配点为止
                这样的一条路径叫做交替路，交替路中不包含最后一个非匹配边
            ６．增广路：
                增广路就是商户的交替路中我们将最后一个非匹配边加入之后得到的路径，可以从定义出发，我们得到增广路的诸多性质：
                １．增广路有奇数条边
                ２．起点和终点分别位于两个顶点集中
                ３．增广路中的所有的定点都是交替的出现在我们的顶点集中
                ４．增广路中无重复的点
                ５．起点和终点均为配对
                ６．我们如果对增广路中的边进行标号会发现，奇数号顶点未配对，偶数号顶点配对
            　　综上述性质我们会发现，我们将增广路中的奇号和偶数号边的配对性质进行翻转的话我们的配对数会提高
    ２．重要定理：
        如果从当前的未匹配顶点ａ出发我们找不到增广路的话，我们无论如何利用其他的顶点扩展增广路来修改当前的配对，ａ始终还是找不到增广路
        这个定力向我们揭示了一个匈牙利算法编写时候的一个技巧，我们的其中一个要遍历出发的定点集中的每一个顶点只需要照一次增光路就可以了（找到增广路之后该路第一条边必定是匹配边，不符合增广路的定义）
        我们只需要查找我们的为访问的边就可以了
        因为我们的二分图的最大的匹配数量就是min(n,m)对，所以我们只要将最小数量的一个点集的所有的顶点遍历一遍就好（按照这个定力，我们找不到增广路的点说明以后都找不到就不要考虑了，寻求以后的顶点）
    ３．DFS深度优先搜索实现匈牙利算法：
            遍历二分图中的其中一个点集中的所有的点，搜索可行的增广路，如果找到了增广路之后将其中的未匹配边和匹配边进行互换，则匹配数累加一
            输出最后的最大的增广路即可
            对于路径的记录，我们采取采用必要的数据结构就可以实现最后的保存
    ４．应用-求解ＳＤＲ：
        １．定义：
            族：可重复的序列
                子集族：族中的元素是子集，并且子集可以相同重复，但是重复的子集是不同的
            ＳＲ：我们定义将子集族中的每一个子集选出当前的子集中的一个元素当做其代表元素，我们称之为是代表系
            ＳＤＲ:如果我们的代表系中的所有的元素都不相同，我们称这样的ＳＲ是ＳＤＲ
        ２．理解：
            一个子集族可能并不具备ＳＤＲ所以我们的主要工作就是证明或者找出ＳＤＲ或者找出最大的子族使得存在ＳＤＲ
            显然这个问题就转化成了我们的最大二分图匹配的问题，只不过我们的子集族中的每一个子集相当于无向二分图中的一个顶点的所有的邻接顶点
            我们的找最大的ＳＤＲ就转化成了二分图最大匹配问题.
