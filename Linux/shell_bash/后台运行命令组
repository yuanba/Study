命令的后台运行

1.&
我们在我们要执行的命令之后添加&符号之后我们的该命令就会转移到我们的后台去运行，但是要小心
    1.后台运行的命令的输出设备还是我们的当前的终端，我们如果想要禁止输出，可以重定向到文件或者我们重定向到我们的/dev/null设备中
    2.如果我们的程序需要和用户交互，我们就不要放在我们的后台设备中去，因为我们的程序会一直在作业队列中stopping

2.jobs
    1.参数-l可以查看我们的后台作业的PID，便于我们的之后对相应的作业进行删除操作和控制操作
    2.展示我们的后台的作业的状态和名称，命令行的形式
   
3.fg / bg
    1.%jobnumber - 将我们的后台的程序搬运到我们的前台执行
    2.%jobnumber - 将我们的后台暂停的程序变成执行的状态
    
4.Ctrl + z
将我们的当前的程序挂起（放入后台并暂停）
可以利用bg命令再次启动

5.ps / pstree / kill
    1.pstree可以形象的显示我们的程序的继承关系
    2.ps -ef | grep ... : 该方法我们可以从整个操作系统中查询所有的进程，并配合我们的grep命令对目标进程进行搜索
    3.kill - kill命令可以杀死进程和作业
        1.%jobnumber - 杀死作业（利用jobs -l命令可以实现针对我们的作业的杀死）
        2.PID - 杀死进程（PID代表进程号）
        
6.后台稳定运行
为了防止我们的程序有当前的终端关闭而结束，我们可以采取很多的不同的操作
    1.nohup：
    我们都知道，我们的程序中，一旦我们的用户撤销/网络中断/父进程死亡，我们相应的旗下的紫禁城都要接受一个hangup信号并且终止运行
    我们可以采用思路nohup使我们的当前的进程忽略我们的nohup信号，这样的话，我们的进程就不会随着终端（父进程）的关闭而中断
    nohup cmd &
    我们通常将我们的命令在nohup之后放入我们的后台去运行，注意要记得将我们的输出重定向或者禁止
    
    2.setsid：
    setsid cmd
    我们还可以采取另一种思路，我们可以将我们的命令运行在我们的一个新的进程中，这个进程不是我们的当前的终端的子进程，自然也就不会接收我们的终端的nohup
    
    3.nohup和setsid的具体的区别：
    首先我们需要知道，我们在nohup下创建我们的后台程序是必须要我们放入后台的，否则会占用我们的前台的工作空间，但是我们的setsid不需要，因为setsid是将我们的程序放在了另外一个进程中中去进行，这个进程一般都是init 1，是我们的用户空间的第一个出事进程，不归属我们的当前的终端，所以我们的当前的终端关闭也没有问题
    然而nohup的父进程仍然是我们的当前终端，只有我们的当前的终端关闭了我们的后台运行程序的父进程才变成init 1
    
    4.disown
    但是一旦我们的程序变成是当前的前台运行，我们可以怎么补救呢，一种方法就是我们使用ctrl+Z将我们的当前的程序挂起放入后台之后启用我们bg运行，但是我们需要知道，我们此时的后台程序是没有被我们加上nohup或者setsid的方法的，我们怎么可以采用disown进行补救
        1.参数：
            -h %jobnumber : 指定的作业号的程序加上nohup
            -ah : 所有的作业都加上nohup标记
            -rh : 将所有的运行中的后台作业都nohup处理
            
7.Tmux实现：
我们还可以使用我们的Tmux实现我们的后台运行，只要我们的会话没有显示的种植，我们就还可以再次的连接上这个会话，保证了后台运行稳定性