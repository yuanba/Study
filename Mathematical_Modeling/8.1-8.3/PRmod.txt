# PR model for the question
# Define this module to fine the best location of the PR parking

/* the set for the question*/
set line 'The line of the train';
set station 'The station of the line';

/* the param which the modeling need */
param v1;     # the speed of the public transforming.
param v2;     # the speed of the private transforming.
param a;      # the costing of late (public v.s. private)
param alpha;
param beta;
param D{i in line , j in station};    # the distance from pos to the destiantion
param P;    # the constraints of the number of the parking.
param R;    # the R of thr circle which the park cover.
param L;    # the large size of the number of the station in one line.
param S;    # the constraints which is important
param F;    # the cost for parking the car.
param N{i in line , j in station};
param C1;
param C0;
param Q{i in line, j in station};

/* the variables */
var X {i in line , j in station} binary;     # 1 - choose , 0 - unchoose , X is binary.

/* Objective functions */
maximize z : sum{i in line} (sum{j in station} N[i,j] * X[i,j] / Q[i,j]);

/* constraints */

s.t. IMC{i in line} : sum{j in station} X[i,j] <= R; 

s.t. LC : sum{i in line , j in station} X[i,j] <= P;    # the number of the parking must less than the constraints P.

s.t. ER : sum{i in line , j in station} X[i,j] >= 1;    # At least choose one place to create the parking , the exist constraints.

s.t. IR{i in line , j in station} : F <= a * (D[i,j] / v1 - D[i,j] / v2) + D[i,j] * (alpha + beta);    # the most important constraints of this modeling.

end;
